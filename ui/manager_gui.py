import tkinter as tk
from tkinter import ttk, messagebox
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ report.py
from asakk.report import (
    analyze_all_results,
    analyze_category_data,
    score_distribution_by_category,
    pie_chart_by_category,
    generate_recommendations,
    export_to_csv,
    predict_culture,
    calculate_category_trend,
    analyze_survey_data,
    build_category_bar_chart
)


class ManagerApp:
    def __init__(self, root, user):
        self.root = root
        self.user = user
        self.root.title("–ê–°–ê–ö–ö ‚Äî –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        self.root.geometry("650x500")
        self.root.configure(bg="#f8f9fa")

        self.center_window()
        self.create_widgets()

    def center_window(self):
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        window_width = 650
        window_height = 500
        x = (screen_width // 2) - (window_width // 2)
        y = (screen_height // 2) - (window_height // 2)
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")

    def create_widgets(self):
        title_label = tk.Label(
            self.root,
            text="–ú–µ–Ω–µ–¥–∂–µ—Ä: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã",
            font=("Arial", 16, "bold"),
            bg="#f8f9fa",
            fg="#343a40"
        )
        title_label.pack(pady=20)

        category_frame = tk.Frame(self.root, bg="#f8f9fa")
        category_frame.pack(pady=10)

        tk.Label(category_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", font=("Arial", 12), bg="#f8f9fa").pack()

        self.category_var = tk.StringVar(value="–¶–µ–Ω–Ω–æ—Å—Ç–∏")
        categories = ["–¶–µ–Ω–Ω–æ—Å—Ç–∏", "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ", "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏", "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ", "–†–∞–±–æ—Ç–∞ –∏ –ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å"]

        self.category_menu = ttk.Combobox(
            category_frame,
            textvariable=self.category_var,
            values=categories,
            state="readonly",
            width=30,
            font=("Arial", 12)
        )
        self.category_menu.pack(pady=5)

        button_frame = tk.Frame(self.root, bg="#f8f9fa")
        button_frame.pack(pady=10)

        tk.Button(button_frame, text="üìä –û–±—â–∏–π –æ—Ç—á–µ—Ç", width=25,
                  command=lambda: self.show_matplotlib_window(analyze_all_results),
                  bg="#007bff", fg="white").pack(pady=5)

        tk.Button(button_frame, text="üìà –û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", width=25,
                  command=self.show_category_report,
                  bg="#28a745", fg="white").pack(pady=5)

        tk.Button(button_frame, text="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫", width=25,
                  command=self.show_score_distribution,
                  bg="#ffc107", fg="black").pack(pady=5)

        tk.Button(button_frame, text="–î–∏–∞–≥—Ä–∞–º–º–∞ –æ—Ü–µ–Ω–æ–∫", width=25,
                  command=self.show_pie_chart,
                  bg="#17a2b8", fg="white").pack(pady=5)

        tk.Button(button_frame, text="üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", width=25,
                  command=self.show_recommendations,
                  bg="#dc3545", fg="white").pack(pady=5)

        tk.Button(button_frame, text="üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", width=25,
                  command=self.show_prediction,
                  bg="#6f42c1", fg="white").pack(pady=5)

        tk.Button(button_frame, text="üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV", width=25,
                  command=self.export_data,
                  bg="#6c757d", fg="white").pack(pady=5)

        tk.Button(button_frame, text="üö™ –í—ã–π—Ç–∏", width=25,
                  command=self.root.quit,
                  bg="#343a40", fg="white").pack(pady=5)

    def disable_main_window(self):
        for widget in self.root.winfo_children():
            if isinstance(widget, tk.Toplevel):
                continue
            try:
                widget.configure(state='disabled')
            except tk.TclError:
                pass

    def enable_main_window(self):
        for widget in self.root.winfo_children():
            if isinstance(widget, tk.Toplevel):
                continue
            try:
                widget.configure(state='normal')
            except tk.TclError:
                pass

    def show_matplotlib_window(self, plot_func):
        self.disable_main_window()
        fig = None
        try:
            fig = plot_func()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")
            self.enable_main_window()
            return
        if fig is None:
            self.enable_main_window()
            return

        graph_window = tk.Toplevel(self.root)
        graph_window.title("–ì—Ä–∞—Ñ–∏–∫")
        canvas = FigureCanvasTkAgg(fig, master=graph_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        graph_window.protocol("WM_DELETE_WINDOW", lambda: [graph_window.destroy(), self.enable_main_window()])

    def build_category_bar_chart(data, category):
        """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ –¥–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        import matplotlib.pyplot as plt
        fig, ax = plt.subplots(figsize=(8, 5))
        ax.bar(data["questions"], data["scores"])
        ax.set_title(f"–û—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
        ax.set_xlabel("–í–æ–ø—Ä–æ—Å—ã")
        ax.set_ylabel("–û—Ü–µ–Ω–∫–∞")
        plt.xticks(rotation=45, fontsize=8, ha='right')
        plt.tight_layout()
        return fig


    def show_category_report(self):
        self.disable_main_window()
        category = self.category_var.get()
        try:
            data = analyze_category_data(category)
            if not data:
                messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", f"–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
                self.enable_main_window()
                return

            fig = build_category_bar_chart(data, category)
            if fig:
                graph_window = tk.Toplevel(self.root)
                canvas = FigureCanvasTkAgg(fig, master=graph_window)
                canvas.draw()
                canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
                graph_window.protocol("WM_DELETE_WINDOW", lambda: [graph_window.destroy(), self.enable_main_window()])
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç: {e}")
            self.enable_main_window()

    def show_score_distribution(self):
        self.disable_main_window()
        category = self.category_var.get()
        try:
            fig = score_distribution_by_category(category)
            if fig:
                graph_window = tk.Toplevel(self.root)
                canvas = FigureCanvasTkAgg(fig, master=graph_window)
                canvas.draw()
                canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
                graph_window.protocol("WM_DELETE_WINDOW", lambda: [graph_window.destroy(), self.enable_main_window()])
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")
            self.enable_main_window()

    def show_pie_chart(self):
        self.disable_main_window()
        category = self.category_var.get()
        try:
            fig = pie_chart_by_category(category)
            if fig:
                graph_window = tk.Toplevel(self.root)
                canvas = FigureCanvasTkAgg(fig, master=graph_window)
                canvas.draw()
                canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
                graph_window.protocol("WM_DELETE_WINDOW", lambda: [graph_window.destroy(), self.enable_main_window()])
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É: {e}")
            self.enable_main_window()

    def show_recommendations(self):
        self.disable_main_window()
        try:
            analysis = analyze_survey_data()
            recommendations = generate_recommendations()

            if not analysis and not recommendations:
                messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
                self.enable_main_window()
                return

            rec_window = tk.Toplevel(self.root)
            rec_window.title("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫—É–ª—å—Ç—É—Ä—ã")
            rec_window.geometry("800x600")
            rec_window.configure(bg="#ffffff")

            rec_text = tk.Text(rec_window, wrap=tk.WORD, height=30, width=100, bg="#f9f9f9", bd=2, relief="sunken")
            rec_text.pack(padx=10, pady=10)

            rec_text.insert(tk.END, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n")

            for cat, data in analysis.items():
                rec_text.insert(tk.END, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n")
                rec_text.insert(tk.END, f"  –°—Ä–µ–¥–Ω–µ–µ: {data['mean']}\n")
                rec_text.insert(tk.END, f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {data['std']}\n")
                rec_text.insert(tk.END, f"  –î–∏—Å–ø–µ—Ä—Å–∏—è: {data['var']}\n")
                rec_text.insert(tk.END, f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(data['anomalies'])}\n\n")

                if data['anomalies']:
                    rec_text.insert(tk.END, "  üîç –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n")
                    for anomaly in data['anomalies']:
                        rec_text.insert(tk.END, f"    - {anomaly['question']} | –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {anomaly['deviation']}\n")
                    rec_text.insert(tk.END, "\n")

            rec_text.insert(tk.END, "üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n")

            if not recommendations:
                rec_text.insert(tk.END, "  –ù–µ—Ç —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n")
            else:
                for cat, events in recommendations.items():
                    rec_text.insert(tk.END, f"‚û°Ô∏è {cat}:\n")
                    for event in events:
                        rec_text.insert(tk.END, f"- {event}\n")
                    rec_text.insert(tk.END, "\n")

            rec_text.config(state=tk.DISABLED)

            tk.Button(rec_window, text="–ó–∞–∫—Ä—ã—Ç—å",
                      command=lambda: [rec_window.destroy(), self.enable_main_window()],
                      width=20, bg="#343a40", fg="white").pack(pady=10)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
            self.enable_main_window()

    def export_data(self):
        try:
            export_to_csv()
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ results.csv")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")

    def show_prediction(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å –≥—Ä–∞—Ñ–∏–∫–æ–º —Ç—Ä–µ–Ω–¥–∞"""
        self.disable_main_window()
        category = self.category_var.get()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
            prediction = predict_culture()
            if not prediction:
                messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.")
                self.enable_main_window()
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            trend_data = calculate_category_trend(category)
            if trend_data is None:
                messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
                self.enable_main_window()
                return

            # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
            pred_window = tk.Toplevel(self.root)
            pred_window.title(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã ‚Äî {category}")
            pred_window.geometry("900x600")
            pred_window.configure(bg="#ffffff")

            # –õ–µ–≤–∞—è —á–∞—Å—Ç—å: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            text_frame = tk.Frame(pred_window, bg="#ffffff")
            text_frame.pack(side=tk.LEFT, padx=10, pady=10, fill=tk.Y)

            tk.Label(text_frame, text="üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏", font=("Arial", 14, "bold"), bg="#ffffff").pack(pady=5)

            pred_text = tk.Text(text_frame, wrap=tk.WORD, height=20, width=40, bg="#f9f9f9", bd=2, relief="sunken")
            pred_text.pack(padx=5, pady=5)

            for cat, result in prediction.items():
                pred_text.insert(tk.END, f"{cat}:\n{result}\n\n")
            pred_text.config(state=tk.DISABLED)

            # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞
            graph_frame = tk.Frame(pred_window, bg="#ffffff")
            graph_frame.pack(side=tk.RIGHT, padx=10, pady=10, fill=tk.BOTH, expand=True)

            fig, ax = plt.subplots(figsize=(7, 4))
            x = list(range(len(trend_data["scores"])))
            ax.plot(x, trend_data["scores"], label="–û—Ü–µ–Ω–∫–∏", marker='o', linestyle='')
            ax.plot(x, trend_data["trend"], color='red',
                    label=f'–¢—Ä–µ–Ω–¥ (y = {trend_data["slope"][0]:.2f}x + {trend_data["intercept"][0]:.2f})')
            ax.set_title(f"–¢—Ä–µ–Ω–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
            ax.set_xlabel("–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞")
            ax.set_ylabel("–û—Ü–µ–Ω–∫–∞")
            ax.legend()
            plt.tight_layout()

            canvas = FigureCanvasTkAgg(fig, master=graph_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            tk.Button(
                pred_window,
                text="–ó–∞–∫—Ä—ã—Ç—å",
                command=lambda: [pred_window.destroy(), self.enable_main_window()],
                width=20,
                bg="#343a40",
                fg="white"
            ).pack(pady=10)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑: {e}")
            self.enable_main_window()